name: Deploy Logic App

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'deploy/*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure CLI login (service principal)
        uses: azure/CLI@v1
        with:
          azcliversion: '2.57.0'
          inlineScript: |
            az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"
            az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Inject connection IDs into workflow JSON
        # This step assumes connection resource IDs are provided as secrets. The next step will
        # attempt to create or update connections if needed.
        env:
          TEAMS_CONNECTION_ID: ${{ secrets.TEAMS_CONNECTION_ID }}
          TEAMS_CONNECTION_NAME: ${{ secrets.TEAMS_CONNECTION_NAME }}
          TEAMS_MANAGEDAPI_ID: ${{ secrets.TEAMS_MANAGEDAPI_ID }}
          OFFICE_CONNECTION_ID: ${{ secrets.OFFICE365_CONNECTION_ID }}
          OFFICE_CONNECTION_NAME: ${{ secrets.OFFICE365_CONNECTION_NAME }}
          OFFICE_MANAGEDAPI_ID: ${{ secrets.OFFICE365_MANAGEDAPI_ID }}
        run: |
          src=infra/logic-apps/fabric-capacity-approval-workflow.json
          dst=infra/logic-apps/deploy-workflow.json
          jq \
            --arg teams "$TEAMS_CONNECTION_ID" \
            --arg teamsName "$TEAMS_CONNECTION_NAME" \
            --arg teamsId "$TEAMS_MANAGEDAPI_ID" \
            --arg office "$OFFICE_CONNECTION_ID" \
            --arg officeName "$OFFICE_CONNECTION_NAME" \
            --arg officeId "$OFFICE_MANAGEDAPI_ID" \
            '.parameters.$connections.value.teams.connectionId=$teams | .parameters.$connections.value.teams.connectionName=$teamsName | .parameters.$connections.value.teams.id=$teamsId | .parameters.$connections.value.office365.connectionId=$office | .parameters.$connections.value.office365.connectionName=$officeName | .parameters.$connections.value.office365.id=$officeId' \
            "$src" > "$dst"

      - name: Ensure connectors exist / create or update connections
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          LOCATION: ${{ secrets.LOGIC_APP_LOCATION }}
          TEAMS_CONNECTION_NAME: ${{ secrets.TEAMS_CONNECTION_NAME }}
          OFFICE_CONNECTION_NAME: ${{ secrets.OFFICE365_CONNECTION_NAME }}
          # These secrets are optional; if not provided this step will skip creation
          TEAMS_CONNECTION_ID: ${{ secrets.TEAMS_CONNECTION_ID }}
          OFFICE_CONNECTION_ID: ${{ secrets.OFFICE365_CONNECTION_ID }}
        run: |
          # If TEAMS_CONNECTION_ID is empty we create a connection resource for Teams
          if [ -z "$TEAMS_CONNECTION_ID" ]; then
            echo "Creating Teams connection resource"
            body=$(jq -n --arg name "$TEAMS_CONNECTION_NAME" --arg loc "$LOCATION" '{properties: {displayName: $name}}')
            uri="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Web/connections/$TEAMS_CONNECTION_NAME?api-version=2016-06-01"
            az rest --method put --uri "$uri" --body "$body"
          else
            echo "Teams connection ID provided, skipping creation"
          fi

          if [ -z "$OFFICE_CONNECTION_ID" ]; then
            echo "Creating Office365 connection resource"
            body=$(jq -n --arg name "$OFFICE_CONNECTION_NAME" --arg loc "$LOCATION" '{properties: {displayName: $name}}')
            uri="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Web/connections/$OFFICE_CONNECTION_NAME?api-version=2016-06-01"
            az rest --method put --uri "$uri" --body "$body"
          else
            echo "Office365 connection ID provided, skipping creation"
          fi

      - name: Build deployment body
        env:
          LOGIC_APP_LOCATION: ${{ secrets.LOGIC_APP_LOCATION }}
        run: |
          src=infra/logic-apps/deploy-workflow.json
          body=infra/logic-apps/deploy-body.json
          # Create a JSON body containing location and properties.definition + properties.parameters
          jq --arg loc "$LOGIC_APP_LOCATION" '{location: $loc, properties: {definition: .definition, parameters: .parameters}}' "$src" > "$body"

      - name: Deploy Logic App via REST
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          LOGIC_APP_NAME: ${{ secrets.LOGIC_APP_NAME }}
        run: |
          body=infra/logic-apps/deploy-body.json
          uri="https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Logic/workflows/$LOGIC_APP_NAME?api-version=2016-06-01"
          az rest --method put --uri "$uri" --body @$body

      - name: Verify deployment
        run: |
          az resource show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --resource-type "Microsoft.Logic/workflows" --name ${{ secrets.LOGIC_APP_NAME }} --query "properties.provisioningState"
